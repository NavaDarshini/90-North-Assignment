# Generated by Django 5.0.6 on 2025-03-02 13:10

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatSessionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('session_id', models.CharField(blank=True, max_length=100, null=True)),
                ('testing', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'Chat Sessions',
            },
        ),
        migrations.CreateModel(
            name='ColourPreferencesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=100)),
                ('preference_type', models.IntegerField(choices=[(1, 'HAIR COLOUR'), (2, 'EYE COLOUR')])),
            ],
            options={
                'db_table': 'Colour preferences',
            },
        ),
        migrations.CreateModel(
            name='ContactUsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('country_code', models.CharField(blank=True, max_length=10, null=True)),
                ('phone_no', models.CharField(blank=True, max_length=20, null=True)),
                ('data', models.TextField(default='')),
                ('privacy_policy', models.TextField(default='')),
                ('service_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
            ],
            options={
                'db_table': 'ContactUsModel',
            },
        ),
        migrations.CreateModel(
            name='FAQModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('question', models.TextField()),
                ('answer', models.TextField()),
            ],
            options={
                'db_table': 'Faqs',
            },
        ),
        migrations.CreateModel(
            name='ManageAddressModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('address_location', models.TextField(default='')),
                ('house_flat_block_no', models.CharField(blank=True, max_length=255, null=True)),
                ('landmark', models.CharField(blank=True, max_length=255, null=True)),
                ('street_no', models.CharField(blank=True, max_length=255, null=True)),
                ('phone_no_manage_address', models.CharField(blank=True, max_length=255, null=True)),
                ('address_type', models.IntegerField(blank=True, choices=[(1, 'HOME'), (2, 'WORK'), (3, 'OTHER')], null=True)),
                ('city', models.CharField(default='', max_length=100)),
                ('state', models.CharField(default='', max_length=100)),
                ('country', models.CharField(default='', max_length=100)),
            ],
            options={
                'db_table': 'ManageAddress',
            },
        ),
        migrations.CreateModel(
            name='NotificationModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=254, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('notification_type', models.IntegerField(choices=[(1, 'email'), (2, 'push notification')], default=1)),
                ('notification_for', models.IntegerField(choices=[(1, 'all'), (2, 'customer'), (3, 'artist')], default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'notification_model',
            },
        ),
        migrations.CreateModel(
            name='TalentCategoryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'Talent Category',
            },
        ),
        migrations.CreateModel(
            name='TermAndConditionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('data', models.TextField(default='')),
                ('privacy_policy', models.TextField(default='')),
            ],
            options={
                'db_table': 'Terms_And_condition',
            },
        ),
        migrations.CreateModel(
            name='UploadMediaModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('media_file_url', models.TextField()),
                ('media_file_name', models.CharField(max_length=100)),
                ('media_file_type', models.CharField(blank=True, default='', max_length=100)),
                ('is_video', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'Media',
            },
        ),
        migrations.CreateModel(
            name='BookingTalentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('booking_id', models.IntegerField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('time', models.TimeField(blank=True, null=True)),
                ('duration', models.IntegerField(blank=True, help_text='in hours', null=True)),
                ('status', models.IntegerField(blank=True, choices=[(1, 'PENDING'), (2, 'COMPLETED'), (3, 'CANCELLED')], null=True)),
                ('track_booking', models.IntegerField(blank=True, choices=[(1, 'CLIENT MADE OFFER'), (2, 'TALENT COUNTER OFFERED'), (3, 'TALENT AND CLIENT BOTH ACCEPTED'), (4, 'TALENT REJECTED'), (5, 'CLIENT REJECTED'), (6, 'MARKED COMPLETED')], null=True)),
                ('offer_price', models.IntegerField(default=0)),
                ('counter_offer_price', models.IntegerField(blank=True, null=True)),
                ('final_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('comment', models.TextField(default='')),
                ('currency', models.CharField(blank=True, max_length=10, null=True)),
                ('services', models.JSONField(default=list)),
                ('rating_by_client', models.BooleanField(default=False)),
                ('rating_by_talent', models.BooleanField(default=False)),
                ('cancellation_reason', models.TextField(blank=True, null=True)),
                ('payment_completed', models.BooleanField(default=False)),
                ('client_marked_completed', models.BooleanField(default=False)),
                ('talent_marked_completed', models.BooleanField(default=False)),
                ('booking_type', models.IntegerField(choices=[(1, 'PRE BOOK'), (2, 'PAY LATER')], default=2)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.manageaddressmodel')),
            ],
            options={
                'db_table': 'bookingDetails',
            },
        ),
        migrations.CreateModel(
            name='TalentSubCategoryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=100)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.talentcategorymodel')),
            ],
            options={
                'db_table': 'Talent Sub Category',
            },
        ),
        migrations.AddField(
            model_name='talentcategorymodel',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='App.uploadmediamodel'),
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TalentDetailsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('bust', models.IntegerField(blank=True, help_text='in inches', null=True)),
                ('waist', models.IntegerField(blank=True, help_text='in inches', null=True)),
                ('hips', models.IntegerField(blank=True, help_text='in inches', null=True)),
                ('height_feet', models.IntegerField(blank=True, help_text='in feet', null=True)),
                ('height_inches', models.IntegerField(blank=True, help_text='in inches', null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('booking_method', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, size=None)),
                ('portfolio', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, size=None)),
                ('categories', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, size=None)),
                ('sub_categories', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, size=None)),
                ('services', models.JSONField(default=list)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('eye_color', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='eye_colour_fk', to='App.colourpreferencesmodel')),
                ('hair_color', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hair_colour_fk', to='App.colourpreferencesmodel')),
                ('cover_photo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='App.uploadmediamodel')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='App.usermodel')),
            ],
            options={
                'db_table': 'Talent details',
            },
        ),
        migrations.CreateModel(
            name='ReviewAndRatingsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('best_liked', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('review', models.TextField()),
                ('rating', models.IntegerField()),
                ('given_by', models.IntegerField(blank=True, choices=[(1, 'client'), (2, 'talent')], null=True)),
                ('booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='App.bookingtalentmodel')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.usermodel')),
                ('talent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings_talent_user', to='App.usermodel')),
            ],
            options={
                'db_table': 'review and ratings',
            },
        ),
        migrations.CreateModel(
            name='PermissionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module', models.IntegerField(choices=[(1, 'Dashboard'), (2, 'Manage customers'), (3, 'Manage artist'), (4, 'Manage Category'), (5, 'Booking Management'), (6, 'Revenue Management'), (7, 'Notification Management'), (8, 'Report Management'), (9, 'Manage Reviews'), (10, 'Manage CMS'), (12, 'Setting'), (13, 'Logout')])),
                ('is_add', models.BooleanField(default=False)),
                ('is_view', models.BooleanField(default=False)),
                ('is_edit', models.BooleanField(default=False)),
                ('is_delete', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.usermodel')),
            ],
            options={
                'db_table': 'permissions',
            },
        ),
        migrations.CreateModel(
            name='OperationalSlotsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('day', models.CharField(max_length=100)),
                ('start', models.TimeField()),
                ('end', models.TimeField()),
                ('date', models.DateField(blank=True, null=True)),
                ('slots', models.JSONField(default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.usermodel')),
            ],
            options={
                'db_table': 'Operational slots',
                'ordering': ['-date'],
            },
        ),
        migrations.AddField(
            model_name='manageaddressmodel',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.usermodel'),
        ),
        migrations.CreateModel(
            name='ChatStorageModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('message', models.TextField(default='')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.chatsessionmodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to='App.usermodel')),
            ],
            options={
                'db_table': 'Chat Storage',
            },
        ),
        migrations.AddField(
            model_name='chatsessionmodel',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_user', to='App.usermodel'),
        ),
        migrations.AddField(
            model_name='chatsessionmodel',
            name='talent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='talent_user', to='App.usermodel'),
        ),
        migrations.AddField(
            model_name='bookingtalentmodel',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.usermodel'),
        ),
        migrations.AddField(
            model_name='bookingtalentmodel',
            name='talent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='talent_booking_user', to='App.usermodel'),
        ),
        migrations.CreateModel(
            name='AppNotificationModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('notification_type', models.IntegerField(default=2)),
                ('title', models.TextField()),
                ('booking_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='App.bookingtalentmodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.usermodel')),
            ],
            options={
                'db_table': 'App Notifications',
            },
        ),
    ]
